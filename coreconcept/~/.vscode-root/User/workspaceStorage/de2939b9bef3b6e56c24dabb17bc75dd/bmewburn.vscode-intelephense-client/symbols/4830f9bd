[["file:///var/www/html/designpattern1/coreconcept/vendor/mindplay/annotations/test/lib/xTest.php",{"_uri":"file:///var/www/html/designpattern1/coreconcept/vendor/mindplay/annotations/test/lib/xTest.php","_root":{"kind":4096,"name":"file:///var/www/html/designpattern1/coreconcept/vendor/mindplay/annotations/test/lib/xTest.php","location":{"uriHash":1211169213,"range":{"start":{"line":0,"character":0},"end":{"line":291,"character":0}}},"children":[{"kind":512,"name":"mindplay\\test\\lib","location":{"uriHash":1211169213,"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":28}}}},{"kind":1,"name":"ResultPrinter","location":{"uriHash":1211169213,"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":49}}},"modifiers":4096,"associated":[{"kind":1,"name":"mindplay\\test\\lib\\ResultPrinter\\ResultPrinter"}]},{"kind":1,"name":"mindplay\\test\\lib\\xTest","location":{"uriHash":1211169213,"range":{"start":{"line":16,"character":0},"end":{"line":290,"character":1}}},"children":[{"kind":16,"name":"$result","location":{"uriHash":1211169213,"range":{"start":{"line":18,"character":12},"end":{"line":18,"character":19}}},"modifiers":4,"scope":"mindplay\\test\\lib\\xTest"},{"kind":16,"name":"$testRunner","location":{"uriHash":1211169213,"range":{"start":{"line":25,"character":12},"end":{"line":25,"character":23}}},"doc":{"description":"","type":"mindplay\\test\\lib\\xTestRunner"},"modifiers":4,"scope":"mindplay\\test\\lib\\xTest"},{"kind":16,"name":"$resultPrinter","location":{"uriHash":1211169213,"range":{"start":{"line":32,"character":12},"end":{"line":32,"character":26}}},"doc":{"description":"","type":"mindplay\\test\\lib\\ResultPrinter\\ResultPrinter"},"modifiers":4,"scope":"mindplay\\test\\lib\\xTest"},{"kind":16,"name":"$expectedException","location":{"uriHash":1211169213,"range":{"start":{"line":39,"character":12},"end":{"line":39,"character":37}}},"doc":{"description":"","type":"mixed"},"value":"","modifiers":4,"scope":"mindplay\\test\\lib\\xTest"},{"kind":16,"name":"$expectedExceptionMessage","location":{"uriHash":1211169213,"range":{"start":{"line":46,"character":12},"end":{"line":46,"character":42}}},"doc":{"description":"","type":"string"},"value":"''","modifiers":4,"scope":"mindplay\\test\\lib\\xTest"},{"kind":16,"name":"$expectedExceptionCode","location":{"uriHash":1211169213,"range":{"start":{"line":53,"character":12},"end":{"line":53,"character":34}}},"doc":{"description":"","type":"integer"},"modifiers":4,"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"setResultPrinter","location":{"uriHash":1211169213,"range":{"start":{"line":61,"character":4},"end":{"line":64,"character":5}}},"doc":{"description":"Sets result printer.","type":"void"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$resultPrinter","location":{"uriHash":1211169213,"range":{"start":{"line":61,"character":37},"end":{"line":61,"character":65}}},"type":"mindplay\\test\\lib\\ResultPrinter\\ResultPrinter","doc":{"description":"Result printer.","type":"mindplay\\test\\lib\\ResultPrinter\\ResultPrinter"},"scope":"setResultPrinter"}],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"run","location":{"uriHash":1211169213,"range":{"start":{"line":72,"character":4},"end":{"line":142,"character":5}}},"doc":{"description":"Run this test.","type":"boolean"},"modifiers":1,"type":"","children":[{"kind":128,"name":"$testRunner","location":{"uriHash":1211169213,"range":{"start":{"line":72,"character":24},"end":{"line":72,"character":47}}},"type":"mindplay\\test\\lib\\xTestRunner","doc":{"description":"Test runner.","type":"mindplay\\test\\lib\\xTestRunner"},"scope":"run"}],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"assertException","location":{"uriHash":1211169213,"range":{"start":{"line":150,"character":4},"end":{"line":184,"character":5}}},"doc":{"description":"Checks that given exception matches expected one.","type":"void"},"modifiers":4,"type":"","children":[{"kind":128,"name":"$e","location":{"uriHash":1211169213,"range":{"start":{"line":150,"character":37},"end":{"line":150,"character":57}}},"type":"Exception","doc":{"description":"Exception.","type":"Exception"},"value":"null","scope":"assertException"}],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"getResultColor","location":{"uriHash":1211169213,"range":{"start":{"line":191,"character":4},"end":{"line":202,"character":5}}},"doc":{"description":"Returns test result color.","type":"string"},"modifiers":4,"type":"","children":[],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"getResultMessage","location":{"uriHash":1211169213,"range":{"start":{"line":209,"character":4},"end":{"line":220,"character":5}}},"doc":{"description":"Returns test result message.","type":"string"},"modifiers":4,"type":"","children":[],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"check","location":{"uriHash":1211169213,"range":{"start":{"line":228,"character":4},"end":{"line":235,"character":5}}},"doc":{"description":"Calling this method during a test flags a test as passed or failed.","type":""},"modifiers":2,"type":"","children":[{"kind":128,"name":"$pass","location":{"uriHash":1211169213,"range":{"start":{"line":228,"character":29},"end":{"line":228,"character":34}}},"doc":{"description":"bool If this expression evaluates as true, the test is passed","type":"bool"},"scope":"check"},{"kind":128,"name":"$result","location":{"uriHash":1211169213,"range":{"start":{"line":228,"character":36},"end":{"line":228,"character":51}}},"doc":{"description":"string Optional - if supplied, should contain a brief description of why the test failed","type":"bool|string"},"value":"false","scope":"check"}],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"pass","location":{"uriHash":1211169213,"range":{"start":{"line":240,"character":4},"end":{"line":245,"character":5}}},"doc":{"description":"Calling this method during a test manually flags a test as passed","type":""},"modifiers":2,"type":"","children":[],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"fail","location":{"uriHash":1211169213,"range":{"start":{"line":254,"character":4},"end":{"line":258,"character":5}}},"doc":{"description":"Calling this method during a test manually flags a test as failed","type":""},"modifiers":2,"type":"","children":[{"kind":128,"name":"$result","location":{"uriHash":1211169213,"range":{"start":{"line":254,"character":28},"end":{"line":254,"character":43}}},"doc":{"description":"string Optional - if supplied, should contain a brief description of why the test failed\n","type":"bool|string"},"value":"false","scope":"fail"}],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"eq","location":{"uriHash":1211169213,"range":{"start":{"line":267,"character":4},"end":{"line":274,"character":5}}},"doc":{"description":"Calling this method during a test flags a test as passed if two values are exactly (===) the same.","type":""},"modifiers":2,"type":"","children":[{"kind":128,"name":"$a","location":{"uriHash":1211169213,"range":{"start":{"line":267,"character":26},"end":{"line":267,"character":28}}},"doc":{"description":"mixed Any value","type":"mixed"},"scope":"eq"},{"kind":128,"name":"$b","location":{"uriHash":1211169213,"range":{"start":{"line":267,"character":30},"end":{"line":267,"character":32}}},"doc":{"description":"mixed Any value - if exactly the same as $a, the test is passed","type":"mixed"},"scope":"eq"},{"kind":128,"name":"$fail","location":{"uriHash":1211169213,"range":{"start":{"line":267,"character":34},"end":{"line":267,"character":47}}},"doc":{"description":"string Optional - if supplied, should contain a brief description of why the test failed","type":"bool|string"},"value":"false","scope":"eq"}],"scope":"mindplay\\test\\lib\\xTest"},{"kind":32,"name":"setExpectedException","location":{"uriHash":1211169213,"range":{"start":{"line":283,"character":4},"end":{"line":288,"character":5}}},"doc":{"description":"Sets expected exception.","type":""},"modifiers":1,"type":"","children":[{"kind":128,"name":"$exceptionName","location":{"uriHash":1211169213,"range":{"start":{"line":283,"character":41},"end":{"line":283,"character":55}}},"doc":{"description":"Exception class name.","type":"mixed"},"scope":"setExpectedException"},{"kind":128,"name":"$exceptionMessage","location":{"uriHash":1211169213,"range":{"start":{"line":283,"character":57},"end":{"line":283,"character":79}}},"doc":{"description":"Exception message.","type":"string"},"value":"''","scope":"setExpectedException"},{"kind":128,"name":"$exceptionCode","location":{"uriHash":1211169213,"range":{"start":{"line":283,"character":81},"end":{"line":283,"character":102}}},"doc":{"description":"Exception code.","type":"integer"},"value":"null","scope":"setExpectedException"}],"scope":"mindplay\\test\\lib\\xTest"}],"associated":[],"doc":{"description":"A base class to support simple unit tests.\n\nTo define a test, declare a method with no arguments, prefixing it's name with \"test\",\nfor example: function testCanReadXmlFeed().\n\nIf you declare an init() method, this will be run once before proceeding with the tests.\n\nIf you declare a setup() and/or teardown() method, these will be run before/after each test.","type":""},"modifiers":16}]},"_hash":1211169213}]]